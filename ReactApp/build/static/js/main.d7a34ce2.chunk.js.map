{"version":3,"sources":["components/Message.js","components/Chat.js","components/Send.js","App.js","serviceWorker.js","index.js"],"names":["Message","this","props","message","who","Component","Chat","messages","map","key","Send","state","prompt","onSubmit","e","preventDefault","addMessage","setState","onEnd","onChange","target","value","type","name","className","onClick","App","send","username","userId","window","nextTurn","go_to_End","domain","location","host","assign","get_latest","length","len","thisTurn","console","log","fetch","href","method","headers","body","JSON","stringify","then","response","json","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAYeA,EAVf,iLAEQ,OACI,6BACI,+BAAKC,KAAKC,MAAMC,QAAQC,IAAxB,MAAgCH,KAAKC,MAAMC,QAAQA,cAJnE,GAA6BE,aCUdC,EATf,iLAEQ,OAAOL,KAAKC,MAAMK,SAASC,KAAK,SAACL,GAAD,OACxB,kBAAC,EAAD,CAASM,IAAKN,EAAQA,QAASA,QAASA,WAHxD,GAA0BE,aCuCXK,EAxCf,2MACIC,MAAQ,CACJC,OAAS,IAFjB,EAKIC,SAAW,SAACC,GACRA,EAAEC,iBACF,EAAKb,MAAMc,WAAW,EAAKL,MAAMC,QACjC,EAAKK,SAAS,CAACL,OAAQ,MAR/B,EAWIM,MAAQ,SAACJ,GACLA,EAAEC,iBACF,EAAKb,MAAMc,WAAW,UACtB,EAAKC,SAAS,CAACL,OAAQ,MAd/B,EAiBIO,SAAW,SAACL,GAAD,OAAO,EAAKG,SAAS,CAAEL,OAAQE,EAAEM,OAAOC,SAjBvD,wEAqBQ,OACI,6BACI,0BAAMR,SAAUZ,KAAKY,UACjB,2BAAOS,KAAM,OACNC,KAAO,SACPF,MAASpB,KAAKU,MAAMC,OACpBO,SAAYlB,KAAKkB,WACxB,2BACAG,KAAK,SACLD,MAAM,SACNG,UAAU,SAGd,4BAAQC,QAAWxB,KAAKiB,OAAxB,aAlChB,GAA0Bb,aCyFXqB,G,iNApFbf,MAAQ,CACNgB,MAAM,EACNC,SAAU,UACVC,OAAQC,OAAOD,OACfE,SAAU,MACVxB,SAAW,I,EAIbyB,UAAY,WACV,IAAIC,EAAS,UAAYH,OAAOI,SAASC,KAAM,QAAS,EAAKxB,MAAMkB,OACnEC,OAAOI,SAASE,OAAOH,I,EAGzBI,WAAa,WACX,GAAiC,GAA7B,EAAK1B,MAAMJ,SAAS+B,OACtB,MAAO,KAGP,IAAIC,EAAM,EAAK5B,MAAMJ,SAAS+B,OAAQ,EACtC,OAAO,EAAK3B,MAAMJ,SAASgC,GAAKpC,S,EAOpCa,WAAa,SAACb,GACZ,IAAIqC,EAAW,EAAK7B,MAAMoB,SACE,SAAxB,EAAKpB,MAAMoB,SACb,EAAKd,SAAS,CACZc,SAAW,SAIG,wBAAZ5B,GACF,EAAK6B,YAEP,EAAKf,SAAS,CACZc,SAAW,UAGf,EAAKd,SAAS,CACZV,SAAQ,sBAAO,EAAKI,MAAMJ,UAAlB,CAA4B,CAACJ,QAASA,EAASC,IAAKoC,OAG9DC,QAAQC,IAAI,EAAK/B,Q,wEAOT,IAAD,OACP,MAA4B,QAAxBV,KAAKU,MAAMoB,UACfY,MAAMb,OAAOI,SAASU,KAAK,CACzBC,OAAQ,OACRC,QAAQ,CACN,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACnBpB,OAAQ5B,KAAKU,MAAMkB,OACnB1B,QAASF,KAAKoC,iBAGfa,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKpC,WAAWoC,EAAKjD,YAEjC,6BAAK,kBAAC,EAAD,CAAMM,IAAKR,KAAKU,MAAMkB,OAAQtB,SAAUN,KAAKU,MAAMJ,aAM1D,6BAAK,kBAAC,EAAD,CAAME,IAAKR,KAAKU,MAAMkB,OAAQtB,SAAUN,KAAKU,MAAMJ,WACxD,kBAAC,EAAD,CAAMS,WAAcf,KAAKe,kB,GA9EXX,cCOEgD,QACW,cAA7BvB,OAAOI,SAASoB,UAEe,UAA7BxB,OAAOI,SAASoB,UAEhBxB,OAAOI,SAASoB,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMZ,MAAK,SAAAa,GACjCA,EAAaC,iB","file":"static/js/main.d7a34ce2.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Message extends Component {\n    render() {\n        return (\n            <div>\n                <p> {this.props.message.who} : {this.props.message.message}</p>\n            </div>\n        )\n    }\n}\n\nexport default Message\n","import React, { Component } from 'react'\nimport Message from './Message'\n\nexport class Chat extends Component {\n    render() {\n        return this.props.messages.map( (message) => (\n                <Message key={message.message} message={message}/>\n                ));\n        \n    }\n}\n\nexport default Chat\n","import React, { Component } from 'react'\n\nexport class Send extends Component {\n    state = {\n        prompt : ''\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addMessage(this.state.prompt)\n        this.setState({prompt: ''})\n    }\n\n    onEnd = (e) => {\n        e.preventDefault();\n        this.props.addMessage(\"#reset\")\n        this.setState({prompt: ''})\n    }\n\n    onChange = (e) => this.setState({ prompt: e.target.value });\n\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <input type =\"text\" \n                           name = \"prompt\"\n                           value = {this.state.prompt}\n                           onChange = {this.onChange}/>\n                    <input \n                    type=\"submit\" \n                    value=\"Submit\" \n                    className=\"btn\"/>\n                </form>\n\n                <button onClick = {this.onEnd}> End</button>                \n            </div>\n        )\n    }\n}\n\nexport default Send\n","import React, { Component } from 'react'\nimport Chat from './components/Chat'\nimport Send from './components/Send'\nimport './App.css';\n\nclass App extends Component{\n\n  state = {\n    send: true,\n    username: \"Neeserg\",\n    userId: window.userId,\n    nextTurn: \"bot\",\n    messages : [\n    ]\n  }\n\n  go_to_End = ()=>{\n    let domain = \"http://\" + window.location.host +\"/end/\" +this.state.userId\n    window.location.assign(domain)\n  }\n\n  get_latest = ()=>{\n    if (this.state.messages.length ==0){\n      return \"hi\"\n    }\n    else{\n      let len = this.state.messages.length -1\n      return this.state.messages[len].message\n\n    }\n  }\n\n\n\n  addMessage = (message) =>{\n    let thisTurn = this.state.nextTurn;\n    if (this.state.nextTurn === 'user'){\n      this.setState({\n        nextTurn : 'bot'\n      })\n    }\n    else{\n      if (message === \"End Of Conversation\"){\n        this.go_to_End()\n      }\n      this.setState({\n        nextTurn : 'user'\n      })\n    }\n    this.setState({\n      messages : [...this.state.messages, {message: message, who: thisTurn}]\n    });\n\n    console.log(this.state)\n  }\n\n\n\n\n\n  render() { \n    if (this.state.nextTurn === 'bot'){\n    fetch(window.location.href,{\n      method: 'POST',\n      headers:{\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      userId: this.state.userId,\n      message: this.get_latest()\n    })\n    })\n    .then(response => response.json())\n    .then(json => this.addMessage(json.message));\n    return (\n      <div><Chat key={this.state.userId} messages={this.state.messages} /></div>\n    \n  );\n}\nelse{\n  return (\n    <div><Chat key={this.state.userId} messages={this.state.messages} />\n    <Send addMessage = {this.addMessage}/></div>\n  \n);\n}\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}